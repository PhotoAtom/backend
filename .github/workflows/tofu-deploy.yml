name: PhotoAtom Backend Infrastructure Deployment onto Self Hosted K3D Cluster

on:
  workflow_dispatch:
  push:
    branches:
      - feature/**
      - bug/**
    paths:
      - infrastructure/certificates/**
      - infrastructure/namespace/**
      - infrastructure/secrets/**
      - infrastructure/configuration/**
      - backend/**
      - .github/**
  pull_request:
    paths:
      - infrastructure/certificates/**
      - infrastructure/namespace/**
      - infrastructure/secrets/**
      - infrastructure/configuration/**
      - backend/**
      - .github/**
    branches:
      - main
    types:
      - opened
      - synchronize
      - closed

concurrency:
  group: infra-deploy

jobs:
  namespace_deploy:
    name: PhotoAtom Backend Namespace Deployment onto Self Hosted K3d Cluster
    uses: PhotoAtom/automations/.github/workflows/tofu-deploy.yml@main
    with:
      deployment_name: PhotoAtom Backend Namespace
      folder_path: infrastructure/namespace
      runners: photoatom
    secrets: inherit

  secrets_deploy:
    needs: [namespace_deploy]
    name: PhotoAtom Backend Secrets Deployment onto Self Hosted K3d Cluster
    uses: PhotoAtom/automations/.github/workflows/tofu-deploy.yml@main
    with:
      deployment_name: PhotoAtom Backend Secrets
      folder_path: infrastructure/secrets
      runners: photoatom
    secrets: inherit

  configuration_deploy:
    needs: [secrets_deploy]
    name: PhotoAtom Backend Configuration Deployment onto Self Hosted K3d Cluster
    uses: PhotoAtom/automations/.github/workflows/tofu-deploy.yml@main
    with:
      deployment_name: PhotoAtom Backend Configuration
      folder_path: infrastructure/configuration
      runners: photoatom
      pre_plan_script: |
        echo "Setting up PostgreSQL Key File"
        kubectl get secret -n postgres photoatom-pg-cert -o json | jq -rc '.data."tls.key"' | base64 -d > tls.key
        openssl pkcs8 -topk8 -inform PEM -outform DER -in tls.key -out tls.pk8 -nocrypt

        echo "Setting up Valkey Certificate Files"
        mkdir cache && cd cache
        kubectl get secret -n valkey valkey-tls -o json | jq -rc '.data."tls.key"' | base64 -d > tls.key
        kubectl get secret -n valkey valkey-tls -o json | jq -rc '.data."tls.crt"' | base64 -d > tls.crt
        kubectl get secret -n valkey valkey-tls -o json | jq -rc '.data."ca.crt"' | base64 -d > ca.crt

        KEYSTORE_PASSWORD=$(kubectl get secret -n backend valkey-certificates-passwords -o json | jq -rc '.data.VALKEY_USER_CERT_PASSWORD' | base64 -d)

        TRUSTSTORE_PASSWORD=$(kubectl get secret -n backend valkey-certificates-passwords -o json | jq -rc '.data.VALKEY_CA_CERT_PASSWORD' | base64 -d)

        openssl pkcs12 -export -in tls.crt -inkey tls.key -out keystore.p12 -name "valkey" -passout pass:$KEYSTORE_PASSWORD
        keytool -importcert -keystore truststore.jks -storepass $TRUSTSTORE_PASSWORD -file ca.crt -noprompt
        cd ..
    secrets: inherit

  certificates_deploy:
    needs: [configuration_deploy]
    name: PhotoAtom Backend Certificates Deployment onto Self Hosted K3d Cluster
    uses: PhotoAtom/automations/.github/workflows/tofu-deploy.yml@main
    with:
      deployment_name: PhotoAtom Backend Certificates
      folder_path: infrastructure/certificates
      runners: photoatom
      post_plan_script: |
        # Wait for PhotoAtom Certificate to be provisioned
        echo "Waiting for PhotoAtom Certificate to be provisioned"
        kubectl wait --for=condition=Ready=true certificate/photoatom-ingress-certificate -n backend --timeout=300s
    secrets: inherit
